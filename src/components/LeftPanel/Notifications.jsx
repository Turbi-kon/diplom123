import React, { useState, useRef, useEffect } from "react";
import "./Notifications.css";
import NotificationItem from "./NotificationItem";

const Notifications = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [notifications, setNotifications] = useState([
    {
      id: 1,
      title: "–ù–æ–≤–∞—è –ø–∞—Ä–∞",
      message: "–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–Ω—ë—Ç—Å—è –ø–∞—Ä–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.",
      image: "https://cdn-icons-png.flaticon.com/512/3588/3588294.png",
      isNew: true,
    },
    {
      id: 2,
      title: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      message: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –∑–∞–¥–∞–Ω–∏—é.",
      image: "https://cdn-icons-png.flaticon.com/512/2950/2950661.png",
      isNew: true,
    },
    {
      id: 3,
      title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
      message: "–ü–∞—Ä–∞ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É.",
      isNew: true,
    },
    {
      id: 4,
      title: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      message: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –∑–∞–¥–∞–Ω–∏—é.",
      image: "https://cdn-icons-png.flaticon.com/512/2950/2950661.png",
      isNew: true,
    },
    {
      id: 5,
      title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
      message: "–ü–∞—Ä–∞ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É.",
      isNew: true,
    },
    {
      id: 6,
      title: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      message: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –∑–∞–¥–∞–Ω–∏—é.",
      image: "https://cdn-icons-png.flaticon.com/512/2950/2950661.png",
      isNew: true,
    },
    {
      id: 7,
      title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
      message: "–ü–∞—Ä–∞ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É.",
      isNew: true,
    },
  ]);

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  const handleNotificationClick = (id) => {
    setNotifications((prevNotifications) =>
      prevNotifications.map((notif) =>
        notif.id === id ? { ...notif, isNew: false } : notif
      )
    );
  };

  const clearNotifications = () => {
    setNotifications([]);
  };

  useEffect(() => {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  }, []);

  return (
    <div className="notifications-wrapper">
      <button className="bell-button" onClick={toggleDropdown}>üîî</button>
      {isOpen && (
        <div className="notifications-panel">
          {notifications.length > 0 ? (
            <>
              <div className="notifications-header">
                <button className="clear-btn" onClick={clearNotifications}>
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                </button>
              </div>
              {notifications.map((notif) => (
                <NotificationItem
                  key={notif.id}
                  title={notif.title}
                  message={notif.message}
                  image={notif.image}
                  isNew={notif.isNew}
                  onClick={() => handleNotificationClick(notif.id)}
                />
              ))}
            </>
          ) : (
            <div className="no-notifications">–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>
          )}
        </div>
      )}
    </div>
  );
};

export default Notifications;
